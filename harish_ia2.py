# -*- coding: utf-8 -*-
"""HARISH-IA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XPSG02jqaWn_aETylYn-uqJMO9O890Ix
"""

#1
import numpy as np
rgb_image=np.array([[[255,0,0],[0,255,0],[0,0,255]],[[255,255,0],[255,0,255],[0,255,255]],[[127,127,127],[200,200,200],[50,50,50]]])
print(rgb_image)


def rgb_to_grayscale(rgb_image):

    coefficients = np.array([0.2989, 0.5870, 0.1140])

    grayscale_image = np.dot(rgb_image, coefficients)

    return grayscale_image

rgb_image = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
                      [[255, 255, 0], [255, 0, 255], [0, 255, 255]],
                      [[127, 127, 127], [200, 200, 200], [50, 50, 50]]])
grayscale_image = rgb_to_grayscale(rgb_image)
print(grayscale_image)

#2
import numpy as np

def health_data(splno, attributes):
    healthdata = np.random.normal(loc=0, scale=1, size=(splno,attributes))

    normalized_healthdata = (healthdata - np.mean(healthdata, axis=0)) / np.std(healthdata, axis=0)

    return normalized_healthdata
splno = 10
attributes = 3
health_datagen =health_data(splno,attributes)
print(health_datagen[:2])

#3
import numpy as np
data = np.array([[[1,2],[2,3]],[[1,2],[3,4]],[[5,8],[9,4]]])
print("3D structure:",data)
flat_data = [a.flatten() for a in data]
ans = np.array(flat_data)

print("Original:",data.shape)
print("Reshaped data format:",ans.shape)

#4
import numpy as np
old_per = np.array([[1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9]])

new_per = np.array([[11, 22, 33],
                    [44, 55, 66],
                    [77, 88, 99]])

def performance_score(performance):

    return np.mean(performance, axis=1)
old_scores = performance_score(old_per)
new_scores = performance_score(new_per)

comparing = np.column_stack((old_scores, new_scores))
print("Athlete  Old Score  New Score")
for i, (old_score, new_score) in enumerate(comparing):
    print(f"Athlete {i+1}:   {old_score}      {new_score}")

#5
import numpy as np
data = np.array([[64,81,52,61,66],
 [70,51, 54, 76, 59],
 [60,-1, 77, 88, 89],
 [54,73, 90, -1, 87],
 [93,70, 86, 79, 63]])

three_sub = data[:, -3:]
valid_scores = np.where(three_sub != -1, three_sub, 0)
sum_valid_scores = np.sum(valid_scores, axis=1)
count_valid_scores = np.count_nonzero(valid_scores, axis=1)
count_valid_scores[count_valid_scores == 0] = 1
average_scores = sum_valid_scores / count_valid_scores
print("Average scores",average_scores)

#6
def apply_adjustment_factors(city_temperatures, adjustment_factors):

    adjusted_factors = adjustment_factors.reshape(1, -1)
    adjusted_temperatures = city_temperatures * adjusted_factors

    return adjusted_temperatures
city_temperatures = np.array([
    [20, 25, 30, 28],
    [15, 18, 22, 20],
    [10, 12, 14, 16]
])
adjustment_factors = np.array([0.95, 0.98, 1.05, 1.02])

adjusted_temperatures = apply_adjustment_factors(city_temperatures, adjustment_factors)

print("Original temperatures:")
print(city_temperatures)
print("\nAdjusted temperatures:")
print(adjusted_temperatures)

#7
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
    'Age': [25, 30, 35, 40, 45, 50, 55],
    'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
    'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']
}

final = [(data['Name'][i], data['City'][i]) for i in range(len(data['Name']))
                 if data['Age'][i] < 45 and data['Department'][i] != 'HR']

for name, city in final:
    print(f"Name: {name}, City: {city}")

#8

#9

employee_data = {
    "Alice": {"Department": "HR", "Manager": "John"},
    "Bob": {"Department": "IT", "Manager": "Rachel"},
    "Charlie": {"Department": "Finance", "Manager": "Emily"},
    "David": {"Department": "IT", "Manager": "Rachel"}
}
project_assignments = {
    "Project1": ["Alice", "Bob"],
    "Project2": ["Charlie", "David"],
    "Project3": ["Alice", "David"]
}
department_overview = {}

for project, employees in project_assignments.items():
    for employee in employees:
        department = employee_data[employee]["Department"]
        manager = employee_data[employee]["Manager"]

        if department not in department_overview:
            department_overview[department] = {"Manager": manager, "Employees": set()}
            department_overview[department]["Employees"].add(employee)
for employee, data in employee_data.items():
    if employee not in [emp for emps in project_assignments.values() for emp in emps]:
        department = data["Department"]
        manager = data["Manager"]

        if department not in department_overview:
            department_overview[department] = {"Manager": manager, "Employees": set()}

        department_overview[department]["Employees"].add(employee)

for department, data in department_overview.items():
    print("Department:", department)
    print("Manager:", data["Manager"])
    print("Employees:", ", ".join(data["Employees"]))
    print()

#10
import pandas as pd


data = {
    'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
    'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Sales': [70000, 50000, 30000, 40000, 60000]
}
df = pd.DataFrame(data)


dep_sales = df.groupby('Department')['Sales'].sum()

dep_counts = df['Department'].value_counts()
average_sales_per_salesperson = dep_sales / dep_counts

ranked_departments = average_sales_per_salesperson.sort_values(ascending=False)

print("Average Sales per Salesperson in Each Department:")
print(average_sales_per_salesperson)

print("\nRanked Departments based on Average Sales per Salesperson:")
print(ranked_departments)